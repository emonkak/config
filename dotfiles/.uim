; My .uim
; Basic  {{{1

(define default-im-name 'skk)
(define enabled-im-list '(skk))

(define bridge-show-input-state? #t)
(define bridge-show-with? 'mode)

(define candidate-window-style 'horizontal)

(define uim-color-white
  '((reversed-preedit-foreground   . "black")
    (reversed-preedit-background   . "white")
    (separator-foreground          . "black")
    (separator-background          . "white")
    (reversed-separator-foreground . "black")
    (reversed-separator-background . "white")))

(define uim-color 'uim-color-white)




; XIM  {{{1

(define uim-xim-use-xft-font? #t)
(define uim-xim-xft-font-name "Noto Sans CJK JP")




; Japanese  {{{1

(require "japanese-utf8.scm")

(define ja-rk-rule-basic
  (append '(
            ((("z" " ") . ()) ("　" "　" "　"))
            ((("z" "0") . ()) ("】" "】" "】"))
            ((("z" "9") . ()) ("【" "【" "【"))
            ((("z" "w") . ("z")) ("ｗ" "ｗ" "ｗ")))
          ja-rk-rule-basic))

(define ja-rk-rule-additional
  (filter (lambda (x) (not (equal? (caaar x) "z")))
          ja-rk-rule-additional))

(ja-rk-rule-update)




; SKK  {{{1

(require-module "skk")

(define skk-auto-start-henkan? #f)
(define skk-candidate-op-count 3)
(define skk-dic-file-name (string-append (or (home-directory (user-name)) "") "/.skk/SKK-JISYO.LL.utf8"))
(define skk-egg-like-newline? #t)
(define skk-ja-rk-rule (append ja-rk-rule-basic ja-rk-rule-additional))
(define skk-look-dict "/usr/share/dict/words")
(define skk-on-key '("zenkaku-hankaku" "<Shift> "))
(define skk-on-key? (make-key-predicate '("zenkaku-hankaku" "<Shift> ")))
(define skk-show-annotation-in-preedit? #t)
(define skk-show-annotation? #f)
(define skk-use-look? #t)
(define skk-use-with-vi? #t)




; vim: filetype=scheme foldmethod=marker
