diff --git a/alacritty/src/config/ui_config.rs b/alacritty/src/config/ui_config.rs
index b44bda0d..2b23199c 100644
--- a/alacritty/src/config/ui_config.rs
+++ b/alacritty/src/config/ui_config.rs
@@ -6,12 +6,11 @@ use std::path::PathBuf;
 use std::rc::Rc;
 
 use alacritty_config::SerdeReplace;
-use alacritty_terminal::term::Config as TermConfig;
+use alacritty_terminal::term::{char_width, Config as TermConfig};
 use alacritty_terminal::tty::{Options as PtyOptions, Shell};
 use log::{error, warn};
 use serde::de::{Error as SerdeError, MapAccess, Visitor};
 use serde::{Deserialize, Deserializer};
-use unicode_width::UnicodeWidthChar;
 use winit::keyboard::{Key, ModifiersState};
 
 use alacritty_config_derive::{ConfigDeserialize, SerdeReplace};
@@ -319,7 +318,7 @@ impl<'de> Deserialize<'de> for HintsAlphabet {
 
         let mut character_count = 0;
         for character in value.chars() {
-            if character.width() != Some(1) {
+            if char_width(character) != Some(1) {
                 return Err(D::Error::custom("characters must be of width 1"));
             }
             character_count += 1;
diff --git a/alacritty/src/display/mod.rs b/alacritty/src/display/mod.rs
index 6c685a2a..0dcca783 100644
--- a/alacritty/src/display/mod.rs
+++ b/alacritty/src/display/mod.rs
@@ -21,7 +21,6 @@ use winit::raw_window_handle::RawWindowHandle;
 use winit::window::CursorIcon;
 
 use crossfont::{Rasterize, Rasterizer, Size as FontSize};
-use unicode_width::UnicodeWidthChar;
 
 use alacritty_terminal::event::{EventListener, OnResize, WindowSize};
 use alacritty_terminal::grid::Dimensions as TermDimensions;
@@ -29,7 +28,7 @@ use alacritty_terminal::index::{Column, Direction, Line, Point};
 use alacritty_terminal::selection::Selection;
 use alacritty_terminal::term::cell::Flags;
 use alacritty_terminal::term::{
-    self, LineDamageBounds, Term, TermDamage, TermMode, MIN_COLUMNS, MIN_SCREEN_LINES,
+    self, char_width, LineDamageBounds, Term, TermDamage, TermMode, MIN_COLUMNS, MIN_SCREEN_LINES,
 };
 use alacritty_terminal::vte::ansi::{CursorShape, NamedColor};
 
@@ -1478,9 +1477,9 @@ impl Preedit {
         let cursor_end_offset = if let Some(byte_offset) = cursor_byte_offset {
             // Convert byte offset into char offset.
             let start_to_end_offset =
-                text[byte_offset.0..].chars().fold(0, |acc, ch| acc + ch.width().unwrap_or(1));
+                text[byte_offset.0..].chars().fold(0, |acc, ch| acc + char_width(ch).unwrap_or(1));
             let end_to_end_offset =
-                text[byte_offset.1..].chars().fold(0, |acc, ch| acc + ch.width().unwrap_or(1));
+                text[byte_offset.1..].chars().fold(0, |acc, ch| acc + char_width(ch).unwrap_or(1));
 
             Some((start_to_end_offset, end_to_end_offset))
         } else {
diff --git a/alacritty/src/main.rs b/alacritty/src/main.rs
index 5382e475..bea30cc2 100644
--- a/alacritty/src/main.rs
+++ b/alacritty/src/main.rs
@@ -16,6 +16,7 @@ use std::error::Error;
 use std::fmt::Write as _;
 use std::io::{self, Write};
 use std::path::PathBuf;
+use std::ptr;
 use std::{env, fs};
 
 use log::info;
@@ -172,6 +173,12 @@ fn alacritty(mut options: Options) -> Result<(), Box<dyn Error>> {
         env::set_var(key, value);
     }
 
+    // Set linux locale for using wcwidth().
+    #[cfg(target_os = "linux")]
+    unsafe {
+        libc::setlocale(libc::LC_CTYPE, ptr::null())
+    };
+
     // Switch to home directory.
     #[cfg(target_os = "macos")]
     env::set_current_dir(home::home_dir().unwrap()).unwrap();
diff --git a/alacritty/src/message_bar.rs b/alacritty/src/message_bar.rs
index 267f8322..b8b3f0d4 100644
--- a/alacritty/src/message_bar.rs
+++ b/alacritty/src/message_bar.rs
@@ -1,8 +1,7 @@
 use std::collections::VecDeque;
 
-use unicode_width::UnicodeWidthChar;
-
 use alacritty_terminal::grid::Dimensions;
+use alacritty_terminal::term::char_width;
 
 use crate::display::SizeInfo;
 
@@ -78,7 +77,7 @@ impl Message {
             line.push(c);
 
             // Reserve extra column for fullwidth characters.
-            let width = c.width().unwrap_or(0);
+            let width = char_width(c).unwrap_or(0);
             if width == 2 {
                 line.push(' ');
             }
@@ -264,10 +263,10 @@ mod tests {
 
         let lines = message_buffer.message().unwrap().text(&size);
 
-        assert_eq!(lines, vec![
-            String::from("hahahahahahahahaha [X]"),
-            String::from("[MESSAGE TRUNCATED]   ")
-        ]);
+        assert_eq!(
+            lines,
+            vec![String::from("hahahahahahahahaha [X]"), String::from("[MESSAGE TRUNCATED]   ")]
+        );
     }
 
     #[test]
@@ -353,11 +352,10 @@ mod tests {
 
         let lines = message_buffer.message().unwrap().text(&size);
 
-        assert_eq!(lines, vec![
-            String::from("a [X]"),
-            String::from("bc   "),
-            String::from("defg ")
-        ]);
+        assert_eq!(
+            lines,
+            vec![String::from("a [X]"), String::from("bc   "), String::from("defg ")]
+        );
     }
 
     #[test]
@@ -369,11 +367,10 @@ mod tests {
 
         let lines = message_buffer.message().unwrap().text(&size);
 
-        assert_eq!(lines, vec![
-            String::from("ab  [X]"),
-            String::from("c ðŸ‘© d  "),
-            String::from("fgh    ")
-        ]);
+        assert_eq!(
+            lines,
+            vec![String::from("ab  [X]"), String::from("c ðŸ‘© d  "), String::from("fgh    ")]
+        );
     }
 
     #[test]
diff --git a/alacritty/src/renderer/mod.rs b/alacritty/src/renderer/mod.rs
index 3362db42..13033405 100644
--- a/alacritty/src/renderer/mod.rs
+++ b/alacritty/src/renderer/mod.rs
@@ -10,10 +10,10 @@ use crossfont::Metrics;
 use glutin::context::{ContextApi, GlContext, PossiblyCurrentContext};
 use glutin::display::{GetGlDisplay, GlDisplay};
 use log::{debug, error, info, warn, LevelFilter};
-use unicode_width::UnicodeWidthChar;
 
 use alacritty_terminal::index::Point;
 use alacritty_terminal::term::cell::Flags;
+use alacritty_terminal::term::char_width;
 
 use crate::config::debug::RendererPreference;
 use crate::display::color::Rgb;
@@ -210,7 +210,7 @@ impl Renderer {
             let flags = if wide_char_spacer {
                 wide_char_spacer = false;
                 return None;
-            } else if character.width() == Some(2) {
+            } else if char_width(character) == Some(2) {
                 // The spacer is always following the wide char.
                 wide_char_spacer = true;
                 Flags::WIDE_CHAR
diff --git a/alacritty/src/renderer/text/glyph_cache.rs b/alacritty/src/renderer/text/glyph_cache.rs
index 6acc3189..90ec9e9f 100644
--- a/alacritty/src/renderer/text/glyph_cache.rs
+++ b/alacritty/src/renderer/text/glyph_cache.rs
@@ -6,7 +6,8 @@ use crossfont::{
     Rasterizer, Size, Slant, Style, Weight,
 };
 use log::{error, info};
-use unicode_width::UnicodeWidthChar;
+
+use alacritty_terminal::term::char_width;
 
 use crate::config::font::{Font, FontDescription};
 use crate::config::ui_config::Delta;
@@ -250,7 +251,7 @@ impl GlyphCache {
         // right side of the preceding character. Since we render the
         // zero-width characters inside the preceding character, the
         // anchor has been moved to the right by one cell.
-        if glyph.character.width() == Some(0) {
+        if char_width(glyph.character) == Some(0) {
             glyph.left += self.metrics.average_advance as i32;
         }
 
diff --git a/alacritty/src/string.rs b/alacritty/src/string.rs
index b8c47d3b..a5b1f7cf 100644
--- a/alacritty/src/string.rs
+++ b/alacritty/src/string.rs
@@ -2,7 +2,7 @@ use std::cmp::Ordering;
 use std::iter::Skip;
 use std::str::Chars;
 
-use unicode_width::UnicodeWidthChar;
+use alacritty_terminal::term::char_width;
 
 /// The action performed by [`StrShortener`].
 #[derive(Debug, Clone, Copy, PartialEq, Eq)]
@@ -67,7 +67,7 @@ impl<'a> StrShortener<'a> {
         let mut iter = text.chars().rev().enumerate();
 
         while let Some((idx, ch)) = iter.next() {
-            let ch_width = ch.width().unwrap_or(1);
+            let ch_width = char_width(ch).unwrap_or(1);
             current_len += ch_width;
 
             match current_len.cmp(&max_width) {
@@ -132,7 +132,7 @@ impl Iterator for StrShortener<'_> {
             },
             TextAction::Char => {
                 let ch = self.chars.next()?;
-                let ch_width = ch.width().unwrap_or(1);
+                let ch_width = char_width(ch).unwrap_or(1);
 
                 // Advance width.
                 self.accumulated_len += ch_width;
diff --git a/alacritty_terminal/src/term/mod.rs b/alacritty_terminal/src/term/mod.rs
index 84945f52..f57ef004 100644
--- a/alacritty_terminal/src/term/mod.rs
+++ b/alacritty_terminal/src/term/mod.rs
@@ -11,7 +11,6 @@ use base64::engine::general_purpose::STANDARD as Base64;
 use base64::Engine;
 use bitflags::bitflags;
 use log::{debug, trace};
-use unicode_width::UnicodeWidthChar;
 
 use crate::event::{Event, EventListener};
 use crate::grid::{Dimensions, Grid, GridIterator, Scroll};
@@ -1060,8 +1059,7 @@ impl<T: EventListener> Handler for Term<T> {
     /// A character to be displayed.
     #[inline(never)]
     fn input(&mut self, c: char) {
-        // Number of cells the char will occupy.
-        let width = match c.width() {
+        let width = match char_width(c) {
             Some(width) => width,
             None => return,
         };
@@ -2414,6 +2412,22 @@ impl<'a> RenderableContent<'a> {
     }
 }
 
+#[cfg(target_os = "linux")]
+extern "C" {
+    pub fn wcwidth(ch: libc::wchar_t) -> libc::c_int;
+}
+
+#[cfg(target_os = "linux")]
+pub fn char_width(c: char) -> Option<usize> {
+    usize::try_from(unsafe { wcwidth(c as libc::wchar_t) }).ok()
+}
+
+#[cfg(not(target_os = "linux"))]
+pub fn char_width(c: char) -> Option<usize> {
+    use unicode_width::UnicodeWidthChar;
+    c.width()
+}
+
 /// Terminal test helpers.
 pub mod test {
     use super::*;
@@ -2472,7 +2486,7 @@ pub mod test {
         let lines: Vec<&str> = content.split('\n').collect();
         let num_cols = lines
             .iter()
-            .map(|line| line.chars().filter(|c| *c != '\r').map(|c| c.width().unwrap()).sum())
+            .map(|line| line.chars().filter(|c| *c != '\r').map(|c| char_width(c).unwrap()).sum())
             .max()
             .unwrap_or(0);
 
@@ -2492,7 +2506,7 @@ pub mod test {
                 term.grid[line][Column(index)].c = c;
 
                 // Handle fullwidth characters.
-                let width = c.width().unwrap();
+                let width = char_width(c).unwrap();
                 if width == 2 {
                     term.grid[line][Column(index)].flags.insert(Flags::WIDE_CHAR);
                     term.grid[line][Column(index + 1)].flags.insert(Flags::WIDE_CHAR_SPACER);
