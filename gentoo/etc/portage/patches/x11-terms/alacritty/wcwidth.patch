diff --git a/alacritty/src/display/mod.rs b/alacritty/src/display/mod.rs
index dc37794d..85eac8e1 100644
--- a/alacritty/src/display/mod.rs
+++ b/alacritty/src/display/mod.rs
@@ -21,7 +21,6 @@ use winit::keyboard::ModifiersState;
 use winit::window::CursorIcon;
 
 use crossfont::{self, Rasterize, Rasterizer, Size as FontSize};
-use unicode_width::UnicodeWidthChar;
 
 use alacritty_terminal::event::{EventListener, OnResize, WindowSize};
 use alacritty_terminal::grid::Dimensions as TermDimensions;
@@ -1128,7 +1127,7 @@ impl Display {
                 let is_wide = preedit.text[preedit.cursor_byte_offset.unwrap_or_default()..]
                     .chars()
                     .next()
-                    .map(|ch| ch.width() == Some(2))
+                    .map(|ch| char_width(ch) == Some(2))
                     .unwrap_or_default();
 
                 let cursor_column = Column(
@@ -1430,7 +1429,7 @@ impl Preedit {
         let cursor_end_offset = if let Some(byte_offset) = cursor_byte_offset {
             // Convert byte offset into char offset.
             let cursor_end_offset =
-                text[byte_offset..].chars().fold(0, |acc, ch| acc + ch.width().unwrap_or(1));
+                text[byte_offset..].chars().fold(0, |acc, ch| acc + char_width(ch).unwrap_or(1));
 
             Some(cursor_end_offset)
         } else {
@@ -1574,3 +1573,19 @@ fn window_size(
 
     PhysicalSize::new(width as u32, height as u32)
 }
+
+#[cfg(target_os = "linux")]
+extern "C" {
+    pub fn wcwidth(ch: libc::wchar_t) -> libc::c_int;
+}
+
+#[cfg(target_os = "linux")]
+fn char_width(c: char) -> Option<usize> {
+    usize::try_from(unsafe { wcwidth(c as libc::wchar_t) }).ok()
+}
+
+#[cfg(not(target_os = "linux"))]
+fn char_width(c: char) -> Option<usize> {
+    use unicode_width::UnicodeWidthChar;
+    c.width()
+}
diff --git a/alacritty/src/main.rs b/alacritty/src/main.rs
index 91d99cbe..b37648b5 100644
--- a/alacritty/src/main.rs
+++ b/alacritty/src/main.rs
@@ -153,6 +153,10 @@ fn alacritty(mut options: Options) -> Result<(), Box<dyn Error>> {
         env::set_var(key, value);
     }
 
+    // Set linux locale.
+    #[cfg(target_os = "linux")]
+    unsafe { libc::setlocale(libc::LC_CTYPE, "\0".as_ptr().cast()) };
+
     // Switch to home directory.
     #[cfg(target_os = "macos")]
     env::set_current_dir(home::home_dir().unwrap()).unwrap();
diff --git a/alacritty/src/message_bar.rs b/alacritty/src/message_bar.rs
index 267f8322..2bc09a11 100644
--- a/alacritty/src/message_bar.rs
+++ b/alacritty/src/message_bar.rs
@@ -1,7 +1,5 @@
 use std::collections::VecDeque;
 
-use unicode_width::UnicodeWidthChar;
-
 use alacritty_terminal::grid::Dimensions;
 
 use crate::display::SizeInfo;
@@ -78,7 +76,7 @@ impl Message {
             line.push(c);
 
             // Reserve extra column for fullwidth characters.
-            let width = c.width().unwrap_or(0);
+            let width = char_width(c).unwrap_or(0);
             if width == 2 {
                 line.push(' ');
             }
@@ -189,6 +187,22 @@ impl MessageBuffer {
     }
 }
 
+#[cfg(target_os = "linux")]
+extern "C" {
+    pub fn wcwidth(ch: libc::wchar_t) -> libc::c_int;
+}
+
+#[cfg(target_os = "linux")]
+fn char_width(c: char) -> Option<usize> {
+    usize::try_from(unsafe { wcwidth(c as libc::wchar_t) }).ok()
+}
+
+#[cfg(not(target_os = "linux"))]
+fn char_width(c: char) -> Option<usize> {
+    use unicode_width::UnicodeWidthChar;
+    c.width()
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
diff --git a/alacritty/src/string.rs b/alacritty/src/string.rs
index e41b0785..877ffc08 100644
--- a/alacritty/src/string.rs
+++ b/alacritty/src/string.rs
@@ -2,8 +2,6 @@ use std::cmp::Ordering;
 use std::iter::Skip;
 use std::str::Chars;
 
-use unicode_width::UnicodeWidthChar;
-
 /// The action performed by [`StrShortener`].
 #[derive(Debug, Clone, Copy, PartialEq, Eq)]
 pub enum TextAction {
@@ -66,7 +64,7 @@ impl<'a> StrShortener<'a> {
         let mut iter = text.chars().rev().enumerate();
 
         while let Some((idx, ch)) = iter.next() {
-            let ch_width = ch.width().unwrap_or(1);
+            let ch_width = char_width(ch).unwrap_or(1);
             current_len += ch_width;
 
             match current_len.cmp(&max_width) {
@@ -131,7 +129,7 @@ impl<'a> Iterator for StrShortener<'a> {
             },
             TextAction::Char => {
                 let ch = self.chars.next()?;
-                let ch_width = ch.width().unwrap_or(1);
+                let ch_width = char_width(ch).unwrap_or(1);
 
                 // Advance width.
                 self.accumulated_len += ch_width;
@@ -160,6 +158,22 @@ impl<'a> Iterator for StrShortener<'a> {
     }
 }
 
+#[cfg(target_os = "linux")]
+extern "C" {
+    pub fn wcwidth(ch: libc::wchar_t) -> libc::c_int;
+}
+
+#[cfg(target_os = "linux")]
+fn char_width(c: char) -> Option<usize> {
+    usize::try_from(unsafe { wcwidth(c as libc::wchar_t) }).ok()
+}
+
+#[cfg(not(target_os = "linux"))]
+fn char_width(c: char) -> Option<usize> {
+    use unicode_width::UnicodeWidthChar;
+    c.width()
+}
+
 #[cfg(test)]
 mod tests {
     use super::*;
diff --git a/alacritty_terminal/src/term/mod.rs b/alacritty_terminal/src/term/mod.rs
index ec79886c..83f31ccd 100644
--- a/alacritty_terminal/src/term/mod.rs
+++ b/alacritty_terminal/src/term/mod.rs
@@ -11,7 +11,6 @@ use base64::engine::general_purpose::STANDARD as Base64;
 use base64::Engine;
 use bitflags::bitflags;
 use log::{debug, trace};
-use unicode_width::UnicodeWidthChar;
 
 use crate::event::{Event, EventListener};
 use crate::grid::{Dimensions, Grid, GridIterator, Scroll};
@@ -1055,8 +1054,7 @@ impl<T: EventListener> Handler for Term<T> {
     /// A character to be displayed.
     #[inline(never)]
     fn input(&mut self, c: char) {
-        // Number of cells the char will occupy.
-        let width = match c.width() {
+        let width = match char_width(c) {
             Some(width) => width,
             None => return,
         };
@@ -2383,6 +2381,22 @@ impl<'a> RenderableContent<'a> {
     }
 }
 
+#[cfg(target_os = "linux")]
+extern "C" {
+    pub fn wcwidth(ch: libc::wchar_t) -> libc::c_int;
+}
+
+#[cfg(target_os = "linux")]
+fn char_width(c: char) -> Option<usize> {
+    usize::try_from(unsafe { wcwidth(c as libc::wchar_t) }).ok()
+}
+
+#[cfg(not(target_os = "linux"))]
+fn char_width(c: char) -> Option<usize> {
+    use unicode_width::UnicodeWidthChar;
+    c.width()
+}
+
 /// Terminal test helpers.
 pub mod test {
     use super::*;
